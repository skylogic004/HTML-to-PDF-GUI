#Warn   ; highly recommended!
#SingleInstance Force

MyGui := Gui("+Resize")
MyGui.SetFont("s12", "Segoe UI")


MyGui.Add("Text",, "Press ENTER to run the command")

; I don't get how position works:
; Below, I offset the y position of text field by +13
; and the input fields by +30
; (they line up this way)
; (this is only needed because the Text field above messes everything up)

; === TEXT DESCRIPTIONS (COLUMN 1)
MyGui.Add("Text", "y+13", "URL:")
MyGui.Add("Text",, "Output PDF fpath:")
MyGui.Add("Text",, "Zoom:")
MyGui.Add("Text",, "Resolution (--viewport-size):")
; MyGui.Add("Text",, "Low-quality PDF (--lowquality):")
MyGui.Add("Text",, "JPG quality (int, 0 to 100, default 96) (optional):")
MyGui.Add("Text",, "Page height (cm) (optional)")


; === INPUT FIELDS (COLUMN 2)
urlEdit := MyGui.Add("Edit", "vURL ym+30")  ; The ym option starts a new column of controls.
outFpathEdit := MyGui.Add("Edit", "vOutFpath")
zoomEdit := MyGui.Add("Edit", "vZoom")
resEdit := MyGui.Add("Edit", "vRes")
qualityEdit := MyGui.Add("Edit", "vQuality")
pageHeightEdit := MyGui.Add("Edit", "vPageHeight")

; === DEFAULT VALUES
zoomEdit.Value := "0.8"
resEdit.Value := "1920x1080"

; === "Preview command" button and text output
MyGui.Add("Button", "default", "&Preview command").OnEvent("Click", ProcessUserInput)
cmdText := MyGui.Add("Edit", "w600 h100 xm", "Command will show here") ; The xm options start a new row

; === "Run" button and text output
MyGui.Add("Button", "default w600", "&Run").OnEvent("Click", RunTheThing)
outText := MyGui.Add("Edit", "w600 xm", "") ; The xm options start a new row

; Exit when Escape pressed
MyGui.OnEvent("Escape", ExitApp)

MyGui.Show()

; The Run* functions below copied from https://lexikos.github.io/v2/docs/commands/Run.htm
RunWaitOne(command) {
    ; WshShell object: http://msdn.microsoft.com/en-us/library/aew9yb99
    shell := ComObject("WScript.Shell")
    ; Execute a single command via cmd.exe
    exec := shell.Exec(A_ComSpec " /K " command)
    ; Read and return the command's output
    return exec.StdOut.ReadAll()
}
RunWaitMany(commands) {
    shell := ComObject("WScript.Shell")
    ; Open cmd.exe with echoing of commands disabled
    exec := shell.Exec(A_ComSpec " /Q /K echo off")
    ; Send the commands to execute, separated by newline
    exec.StdIn.WriteLine(commands "`nexit")  ; Always exit at the end!
    ; Read and return the output of all commands
    return exec.StdOut.ReadAll()
}

ProcessUserInput(*)
{
    ; Build the command based on user inputs.

    cmd_options := "wkhtmltopdf.exe --quiet --zoom " zoomEdit.Value " --viewport-size " resEdit.Value

    if (qualityEdit.Value != "")
    {
        cmd_options := cmd_options " --image-quality " qualityEdit.Value
    }

    if (pageHeightEdit.Value != "")
    {
        cmd_options := cmd_options " --page-height " pageHeightEdit.Value "cm --page-width 20cm"
    }
    cmd := cmd_options " " urlEdit.Value " " outFpathEdit.Value
    cmdText.Value := cmd
    return cmd
}

RunTheThing(*)
{
    ; Build the command then execute it
    ; NOTE: `n is a newline

    cmd := ProcessUserInput()

    if (urlEdit.Value != "" and outFpathEdit.Value != "")
    {
        outText.Value := "Running..."
        outText.Value := RunWaitMany(cmd "`necho done")
    }
    else
    {
        outText.Value := "URL and Output fpath required"
    }
}
